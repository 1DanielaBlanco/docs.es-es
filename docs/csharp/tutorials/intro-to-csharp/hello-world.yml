### YamlMime:Tutorial
title: 'Hola mundo: tutorial interactivo de introducción a C#'
metadata:
  title: 'Hola mundo: tutorial interactivo de introducción a C#'
  description: En este tutorial, usará el explorador para aprender a usar C# de forma interactiva. Escriba código de C# y vea los resultados de la compilación y la ejecución del código directamente en el explorador.
  audience: Developer
  level: Beginner
  ms.date: 08/24/2018
  nextTutorialHref: numbers-in-csharp.yml
  nextTutorialTitle: Números en C#
  displayType: two-column
  interactive: csharp
  ms.custom: mvc
  ms.openlocfilehash: 7d6029e48c67259dc2fb28151196223f2490962f
  ms.sourcegitcommit: 35316b768394e56087483cde93f854ba607b63bc
  ms.translationtype: HT
  ms.contentlocale: es-ES
  ms.lasthandoff: 11/26/2018
  ms.locfileid: "52297054"
items:
- durationInMinutes: 1
  content: >
    En este tutorial se enseña a usar C# de forma interactiva, con el uso del explorador para escribir código de C# y ver los resultados de la compilación y ejecución del código. Contiene una serie de lecciones que comienzan con un programa "Hola mundo". En ellas se enseñan los aspectos básicos del lenguaje C#.
- title: Ejecución del primer programa en C#
  durationInMinutes: 2
  content: "Ejecute el código siguiente en la ventana interactiva. Para ello, escriba el siguiente bloque de código en la ventana interactiva y haga clic en el botón **Ejecutar**:\n\n```csharp\nConsole.WriteLine(\"Hello World!\");\n```\n\n¡Enhorabuena! Ha ejecutado su primer programa en C#. Se trata de un programa sencillo que imprime el mensaje \"Hello World!\". Utilizó el método <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> para imprimir ese mensaje. `Console` es un tipo que representa la ventana de la consola. `WriteLine` es un método del tipo `Console` que imprime una línea de texto en dicha consola de texto.\n\nSigamos indagando. En el resto de esta lección se analizan las operaciones con el tipo `string`, que representa el texto en C#. Al igual que el tipo `Console`, el tipo `string` también tiene métodos. Los métodos `string` trabajan con texto. \n\n> [!NOTE]\n> Esta experiencia de codificación en línea se encuentra disponible actualmente en versión preliminar. Si tiene problemas, notifíquelos [en el repositorio de dotnet/try](https://github.com/dotnet/try/issues).\n"
- title: Declaración y uso de variables
  durationInMinutes: 3
  content: "El primer programa imprimió el valor `string` \"Hello World!\" en la pantalla. \n\n> [!TIP]\n> Cuando explore C# o cualquier otro lenguaje de programación, cometerá errores al escribir código. El **compilador** buscará dichos errores y los notificará. Si la salida contiene mensajes de error, revise detenidamente el ejemplo de código y el código de la ventana interactiva para saber qué debe corregir.\n> Este ejercicio le ayudará a aprender la estructura del código de C#. \n\nEl primer programa está limitado a la impresión de un mensaje. Puede escribir programas más útiles mediante **variables**. Una **variable** es un símbolo que se puede usar para ejecutar el mismo código con valores diferentes. Vamos a probarla. Reemplace el código que ha escrito en la ventana interactiva con el código siguiente:\n\n```csharp\nstring aFriend = \"Bill\";\nConsole.WriteLine(aFriend);\n```\n\nLa primera línea declara una variable, `aFriend`, y le asigna un valor, \"Bill\". La segunda línea imprime el nombre.\n\nPuede asignar valores diferentes a cualquier variable que declare. Puede cambiar el nombre por el de alguno de sus amigos. Agregue estas dos líneas en la ventana interactiva después del código que ya ha agregado:\n\n```csharp\naFriend = \"Maira\";\nConsole.WriteLine(aFriend);\n```\n\nTenga en cuenta que la misma línea de código imprime dos mensajes diferentes, según el valor almacenado en la variable `aFriend`.\n\nPuede que haya observado que la palabra \"Hello\" no aparecía en los dos últimos mensajes. Vamos a corregir esto.  Modifique las líneas que imprimen el mensaje por lo siguiente:\n\n```csharp\nConsole.WriteLine(\"Hello \" + aFriend);\n```\n\nVuelva a hacer clic en **Ejecutar** para ver los resultados.\n\nHa usado `+` para crear cadenas a partir de cadenas de **variables** y **constantes**. Existe una forma mejor.\nPuede colocar una variable entre los caracteres `{` y `}` para indicar a C# que sustituya el texto por el valor de la variable.\n\nA esto se le denomina una [interpolación de cadenas](../../language-reference/tokens/interpolated.md).\n\nSi agrega `$` antes de las comillas de apertura de la cadena, puede incluir variables, como `aFriend`, dentro de la cadena entre llaves. Pruébelo:\n\n\n```csharp\nConsole.WriteLine($\"Hello {aFriend}\");\n```\n\nVuelva a hacer clic en **Ejecutar** para ver los resultados. En lugar de \"Hola, {aFriend}\", el mensaje debe ser \"Hola, Maira\".\n\n> [!NOTE]\n> Esta experiencia de codificación en línea se encuentra disponible actualmente en versión preliminar. Si tiene problemas, notifíquelos [en el repositorio de dotnet/try](https://github.com/dotnet/try/issues).\n"
- title: Operaciones con cadenas
  durationInMinutes: 5
  content: >
    La última modificación era un ejemplo de lo que puede hacer con las cadenas. Indaguemos más.


    No está limitado a una única variable entre llaves. Pruebe esto:


    ```csharp

    string firstFriend = "Maria";

    string secondFriend = "Sage";

    Console.WriteLine($"My friends are {firstFriend} and {secondFriend}");

    ```


    A medida que explore más cadenas, observará que las cadenas son más que una colección de letras. Puede buscar la longitud de una cadena mediante `Length`. `Length` es una **propiedad** de una cadena que devuelve el número de caracteres que esta contiene. Agregue el código siguiente en la parte inferior de la ventana interactiva:


    ```csharp

    Console.WriteLine($"The name {firstFriend} has {firstFriend.Length} letters.");

    Console.WriteLine($"The name {secondFriend} has {secondFriend.Length} letters.");

    ```


    > [!TIP]

    > Es un buen momento para que explore por su cuenta. Ha aprendido que `Console.WriteLine()` escribe texto en la pantalla. Ahora también sabe cómo declarar variables y concatenar cadenas de forma conjunta. Experimente en la ventana interactiva. La ventana tiene una característica denominada **IntelliSense** que realiza sugerencias sobre lo que puede hacer. Escriba `.` después de `d` en `firstFriend`. Verá una lista de sugerencias para las propiedades y los métodos que puede usar.


    > [!NOTE]

    > Esta experiencia de codificación en línea se encuentra disponible actualmente en versión preliminar. Si tiene problemas, notifíquelos [en el repositorio de dotnet/try](https://github.com/dotnet/try/issues).
- title: Otras operaciones con cadenas
  durationInMinutes: 5
  content: "Ya ha utilizado un **método**, <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>, para imprimir los mensajes. Un **método** es un bloque de código que implementa alguna acción. Tiene un nombre, por lo que puede acceder a él. \n\nSupongamos que las cadenas tienen espacios iniciales o finales que no desea mostrar. Desea **recortar** los espacios de las cadenas.\nEl método <xref:System.String.Trim%2A> y los métodos relacionados <xref:System.String.TrimStart%2A> y <xref:System.String.TrimEnd%2A> realizan ese trabajo. Solo puede usar estos métodos para quitar los espacios iniciales y finales. Pruebe el código siguiente:\n\n```csharp\nstring greeting = \"      Hello World!       \";\nConsole.WriteLine($\"[{greeting}]\");\n\nstring trimmedGreeting = greeting.TrimStart();\nConsole.WriteLine($\"[{trimmedGreeting}]\");\n\ntrimmedGreeting = greeting.TrimEnd();\nConsole.WriteLine($\"[{trimmedGreeting}]\");\n\ntrimmedGreeting = greeting.Trim();\nConsole.WriteLine($\"[{trimmedGreeting}]\");\n```\n\nEste ejemplo refuerza un par de conceptos importantes para trabajar con cadenas. Los métodos que manipulan cadenas devuelven nuevos objetos de cadena en lugar de realizar modificaciones en contexto. Puede observar que cada llamada a cualquiera de los métodos `Trim` devuelve una cadena nueva, pero no modifica el mensaje original.\n\nHay otros métodos disponibles para trabajar con una cadena. Por ejemplo, probablemente haya usado anteriormente un comando para buscar y reemplazar en un editor o procesador de textos. El método <xref:System.String.Replace%2A> hace algo similar en una cadena. Busca una subcadena y la reemplaza con otro texto. El método <xref:System.String.Replace%2A> toma dos **parámetros**. Son las cadenas que aparecen entre paréntesis. La primera cadena es el texto que se va a buscar. La segunda cadena es el texto por el que se va a reemplazar. Inténtelo usted mismo. Agregue este código. Escríbalo para ver las sugerencias cuando empiece a escribir `.Re` después de la variable `sayHello`:\n\n```csharp\nstring sayHello = \"Hello World!\";\nConsole.WriteLine(sayHello);\nsayHello = sayHello.Replace(\"Hello\", \"Greetings\");\nConsole.WriteLine(sayHello);\n```\n\nOtros dos métodos útiles sirven para convertir todos los caracteres de una cadena en MAYÚSCULA o en minúscula. Pruebe el código siguiente. Escríbalo para ver cómo **IntelliSense** proporciona sugerencias a medida que empiece a escribir `To`:\n\n```csharp\nConsole.WriteLine(sayHello.ToUpper());\nConsole.WriteLine(sayHello.ToLower());\n```\n\n> [!NOTE]\n> Esta experiencia de codificación en línea se encuentra disponible actualmente en versión preliminar. Si tiene problemas, notifíquelos [en el repositorio de dotnet/try](https://github.com/dotnet/try/issues).\n"
- title: Búsqueda en las cadenas
  durationInMinutes: 10
  content: "Otra utilidad de una operación para *buscar y reemplazar* es encontrar texto en una cadena. Puede usar el método <xref:System.String.Contains%2A> para realizar la búsqueda. Indica si una cadena contiene una subcadena. Pruebe el código siguiente para explorar <xref:System.String.Contains%2A>:\n\n```csharp\nstring songLyrics = \"You say goodbye, and I say hello\";\nConsole.WriteLine(songLyrics.Contains(\"goodbye\"));\nConsole.WriteLine(songLyrics.Contains(\"greetings\"));\n```\n\nEl método <xref:System.String.Contains%2A> devuelve un valor **booleano** que indica si se encontró la cadena que buscaba. Un **booleano** almacena un valor `true` o `false`. Obtendrá más información sobre los valores **booleanos** en una lección posterior.\n\n***Desafío***\n\nExisten dos métodos similares, <xref:System.String.StartsWith%2A> y <xref:System.String.EndsWith%2A>, que también buscan subcadenas en una cadena. Encuentran una subcadena al principio o al final de la cadena. Intente modificar el ejemplo anterior para utilizar <xref:System.String.StartsWith%2A> y <xref:System.String.EndsWith%2A> en lugar de <xref:System.String.Contains%2A>. Busque \"You\" o \"goodbye\" al principio de una cadena. Busque \"hello\" o \"goodbye\" al final de una cadena.\n\n> [!Note]\n> Fíjese en la puntuación cuando analice el texto al final de la cadena. Si la cadena finaliza con un punto, debe comprobar si hay una cadena que termina con un punto.\n\nDebe obtener `true` para empezar con \"You\" y terminar con \"hello\" y false para empezar o terminar con \"goodbye\". \n\n> [!NOTE]\n> Esta experiencia de codificación en línea se encuentra disponible actualmente en versión preliminar. Si tiene problemas, notifíquelos [en el repositorio de dotnet/try](https://github.com/dotnet/try/issues).\n"
- title: Desafío completo
  durationInMinutes: 3
  content: >
    ¿Ha obtenido algo parecido a lo siguiente?


    ```csharp

    string songLyrics = "You say goodbye, and I say hello";

    Console.WriteLine(songLyrics.StartsWith("You"));

    Console.WriteLine(songLyrics.StartsWith("goodbye"));


    Console.WriteLine(songLyrics.EndsWith("hello"));

    Console.WriteLine(songLyrics.EndsWith("goodbye"));

    ```


    > [!NOTE]

    > Esta experiencia de codificación en línea se encuentra disponible actualmente en versión preliminar. Si tiene problemas, notifíquelos [en el repositorio de dotnet/try](https://github.com/dotnet/try/issues).
- content: "Ha completado el tutorial de introducción a C# \"Hola, C#\". Puede hacer clic en el vínculo **Números en C# ** siguiente para iniciar el siguiente tutorial interactivo, o bien puede visitar el [sitio de .NET](https://www.microsoft.com/net/learn/dotnet/hello-world-tutorial) para descargar el SDK de .NET Core, crear un proyecto en el equipo y continuar la codificación. El paso \"Mantenimiento del aprendizaje\" le lleva de vuelta a estos tutoriales.\n\nPara obtener más información sobre el tipo `string`:\n- tema sobre [cadenas](../../programming-guide/strings/index.md) de la [Guía de programación de C#](../../programming-guide/index.md). \n- [Sugerencias sobre cómo trabajar con cadenas](../../how-to/index.md#working-with-strings)."
