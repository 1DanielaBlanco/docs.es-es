documentType: Tutorial
title: "Números en C#"
metadata:
  title: "Números en C#"
  description: "En este inicio rápido acerca de los tipos numéricos, deberá usar el explorador para aprender C# de forma interactiva. Va a escribir código de C# y a ver los resultados de la compilación y la ejecución del código directamente en el explorador."
  audience: Developer
  ms.custom: mvc
  level: Beginner
  nextTutorialHref: branches-and-loops
  nextTutorialTitle: Bifurcaciones y bucles en C#
  displayType: two-column
  interactive: csharp
items:
- durationInMinutes: 1
  content: "Este inicio rápido explican los tipos numéricos en C# de forma interactiva, usando el explorador para escribir C# y ver los resultados de compilación y ejecución del código. Contiene una serie de lecciones que ofrecen información detallada sobre los números y las operaciones matemáticas en C#. En ellas se enseñan los aspectos básicos del lenguaje C#.\n"
  ms.openlocfilehash: bc859589078d1e2d16145125a80e738837c1ebf9
  ms.sourcegitcommit: 43c656811dd38a66a6672084c65d10c0cbbf2015
  ms.translationtype: HT
  ms.contentlocale: es-ES
  ms.lasthandoff: 11/22/2017
- title: "Análisis de las operaciones matemáticas con enteros"
  durationInMinutes: 4
  content: "Ejecute el código siguiente en la ventana interactiva. Para ello, escriba el siguiente bloque de código en la ventana interactiva y haga clic en el botón **Ejecutar**:\n\n```csharp\nint a = 18;\nint b = 6;\nint c = a + b;\nConsole.WriteLine(c);\n```\n\nYa ha visto una de las operaciones matemáticas fundamentales con enteros. El tipo `int` representa un **entero**, que puede ser un número entero positivo o negativo. Use el símbolo `+` para la suma. Otros operadores matemáticos comunes con enteros son:\n\n- `-` para resta\n- `*` para multiplicación\n- `/` para división\n\n> [!TIP]\n> En esta guía de inicio rápido, puede explorarlo por su cuenta modificando el código que ha escrito en la ventana interactiva. Este tutorial proporciona ejemplos que puede probar en cada paso.\n\nComience por explorar esas operaciones diferentes. Modifique la tercera línea para probar cada una de estas operaciones. Después de cada modificación, haga clic en el botón **Ejecutar**.\n\nResta:\n\n```csharp\nint c = a - b;\n```\n\nMultiplicación:\n\n```csharp\nint c = a * b;\n```\n\nDivisión: \n\n```csharp\nint c = a / b;\n```\n\nSi lo desea, también puede experimentar con la realización de varias operaciones matemáticas en la misma línea.\n\n> [!TIP]\n> Cuando explore C# o cualquier otro lenguaje de programación, cometerá errores al escribir código. El **compilador** buscará dichos errores y los notificará. Si la salida contiene mensajes de error, revise detenidamente el ejemplo de código y el código de la ventana interactiva para saber qué debe corregir.\n> Este ejercicio le ayudará a aprender la estructura del código de C#.     \n\n> [!NOTE]\n> Esta experiencia de codificación en línea se encuentra disponible actualmente en versión preliminar. Si tiene problemas, notifíquelos [en el repositorio de dotnet/try](https://github.com/dotnet/try/issues).\n"
- title: "Análisis sobre el orden de las operaciones"
  durationInMinutes: 7
  content: "El lenguaje C# define la prioridad de las diferentes operaciones matemáticas con reglas compatibles con las reglas aprendidas en las operaciones matemáticas.\nLa multiplicación y división tienen prioridad sobre la suma y resta.\nIndague sobre ello con la ejecución del código siguiente en la ventana interactiva:\n\n```csharp\nint a = 5;\nint b = 4;\nint c = 2;\nint d = a + b * c;\nConsole.WriteLine(d);\n```\n\nLa salida muestra que la multiplicación se realiza antes que la suma.\n\nPuede forzar la ejecución de un orden diferente de las operaciones si la operación o las operaciones que realizó primero se incluyen entre paréntesis:\n\n```csharp\nint a = 5;\nint b = 4;\nint c = 2;\nint d = (a  + b) * c;\nConsole.WriteLine(d);\n```\n\nCombine muchas operaciones distintas para indagar más. Reemplace la cuarta línea anterior con algo parecido a esto:\n\n```csharp\nint d = (a + b) - 6 * c + (12 * 4) / 3 + 12;\n```\n\nPuede que haya observado un comportamiento interesante de los enteros. División de enteros siempre genera un resultado entero, incluso cuando se podría esperar el resultado para incluir una parte decimal o fraccionaria.\n\nSi no ha observado este comportamiento, pruebe lo siguiente:\n\n```csharp\nint a = 7;\nint b = 4;\nint c = 3;\nint d = (a  + b) / c;\nConsole.WriteLine(d);\n```\n\nVuelva a hacer clic en **Ejecutar** para ver los resultados.\n\n> [!NOTE]\n> Esta experiencia de codificación en línea se encuentra disponible actualmente en versión preliminar. Si tiene problemas, notifíquelos [en el repositorio de dotnet/try](https://github.com/dotnet/try/issues).\n"
- title: "Información sobre los límites y la precisión de los enteros"
  durationInMinutes: 5
  content: "En el último ejemplo se ha mostrado que la división de enteros trunca el resultado.\nPuede obtener el **resto** con el operador de **módulo**, el carácter `%`:\n\n```csharp\nint a = 7;\nint b = 4;\nint c = 3;\nint d = (a  + b) / c;\nint e = (a + b) % c;\nConsole.WriteLine($\"quotient: {d}\");\nConsole.WriteLine($\"remainder: {e}\");\n```\n\nEl tipo de entero de C# difiere de los enteros matemáticos en un aspecto: el tipo `int` tiene límites mínimo y máximo. Ejecute este código en la ventana interactiva para ver esos límites:\n\n```csharp\nint max = int.MaxValue;\nint min = int.MinValue;\nConsole.WriteLine($\"The range of integers is {min} to {max}\");\n```\n\nSi un cálculo genera un valor que supera los límites, se producirá una condición de **subdesbordamiento** o **desbordamiento**. La respuesta parece ajustarse de un límite al otro. Agregue estas dos líneas en la ventana interactiva para ver un ejemplo:\n\n```csharp\nint what = max + 3;\nConsole.WriteLine($\"An example of overflow: {what}\");\n```\n\nTenga en cuenta que la respuesta está muy próxima al entero mínimo (negativo). Es lo mismo que `min + 2`. La operación de suma **desbordó** los valores permitidos para los enteros.\nLa respuesta es un número negativo muy grande porque un desbordamiento \"se ajusta\" desde el valor de entero más alto posible al más bajo.\n\nHay otros tipos numéricos con distintos límites y precisiones que podría usar si el tipo `int` no satisface sus necesidades. Veámoslo a continuación.\n\n> [!NOTE]\n> Esta experiencia de codificación en línea se encuentra disponible actualmente en versión preliminar. Si tiene problemas, notifíquelos [en el repositorio de dotnet/try](https://github.com/dotnet/try/issues).\n"
- title: Operaciones con el tipo double
  durationInMinutes: 5
  content: "El tipo numérico `double` representa números de punto flotante de doble precisión. Puede que no esté familiarizado con estos términos. A **punto flotante** número resulta útil para representar números no entero que pueden ser muy grandes o pequeños en magnitud. **Doble precisión** significa que estos números se almacenan con mayor precisión que en el caso de la **precisión sencilla**. En los equipos modernos, es más habitual utilizar números con doble precisión que con precisión sencilla.\nComencemos a explorar. Pruebe el código siguiente en la ventana interactiva y observe el resultado:\n\n```csharp\ndouble a = 5;\ndouble b = 4;\ndouble c = 2;\ndouble d = (a  + b) / c;\nConsole.WriteLine(d);\n```\n\nTenga en cuenta que la respuesta incluye la parte decimal del cociente. Pruebe una expresión algo más complicada con tipos double:\n\n```csharp\ndouble a = 19;\ndouble b = 23;\ndouble c = 8;\ndouble d = (a  + b) / c;\nConsole.WriteLine(d);\n```\n\nEl intervalo de un valor double es mucho más amplio que en el caso de los valores enteros. Pruebe el código siguiente en la ventana interactiva:\n\n```csharp\ndouble max = double.MaxValue;\ndouble min = double.MinValue;\nConsole.WriteLine($\"The range of double is {min} to {max}\");\n```\n\nEstos valores se imprimen en notación científica. El número a la izquierda de la `E` es la mantisa. El número a la derecha es el exponente, como una potencia de diez. \n\nAl igual que sucede con los números decimales en las operaciones matemáticas, los tipos double en C# pueden presentar errores de redondeo. Pruebe este código:\n\n```csharp\ndouble third = 1.0 / 3.0;\nConsole.WriteLine(third);\n```\n\nSabe que repetir `0.3` no es exactamente lo mismo que `1/3`.\n\n***Desafío***\n\nPruebe otros cálculos con números grandes, números pequeños, multiplicaciones y divisiones con el tipo `double`.  Intente realizar cálculos más complicados.\n\n> [!NOTE]\n> Esta experiencia de codificación en línea se encuentra disponible actualmente en versión preliminar. Si tiene problemas, notifíquelos [en el repositorio de dotnet/try](https://github.com/dotnet/try/issues).\n"
- title: Operaciones con tipos de punto fijo
  durationInMinutes: 8
  content: "Hasta el momento ha visto los tipos numéricos básicos en C#: los tipos integer y double.  Sin embargo, hay otro tipo más que debe aprender: el tipo `decimal`. El `decimal` tipo tiene un intervalo más pequeño pero mayor precisión que `double`. El término **punto fijo** significa que el punto decimal o el punto binario no se mueven. Observemos lo siguiente:\n\n```csharp\ndecimal min = decimal.MinValue;\ndecimal max = decimal.MaxValue;\nConsole.WriteLine($\"The range of the decimal type is {min} to {max}\");\n```\n\nTenga en cuenta que el intervalo es más pequeño que con el tipo `double`. Puede observar una precisión mayor con el tipo decimal si prueba el siguiente código:\n\n```csharp\ndouble a = 1.0;\ndouble b = 3.0;\nConsole.WriteLine(a / b);\n\ndecimal c = 1.0M;\ndecimal d = 3.0M;\nConsole.WriteLine(c / d);\n```\n\nEl sufijo `M` en los números es la forma de indicar que una constante debe usar el tipo `decimal`.\n\nObserve que la expresión matemática con el tipo decimal tiene más dígitos a la derecha del punto decimal. \n\n***Desafío***\n\nAhora que ya conoce los diferentes tipos numéricos, escriba código para calcular el área de un círculo cuyo radio sea de 6,35 cm. Recuerde que el área de un circulo es igual al valor de su radio elevado al cuadrado multiplicado por Pi. Una sugerencia: C# contiene una constante de PI, <xref:System.Math.PI?displayProperty=nameWithType> que puede usar para ese valor. \n\n> [!NOTE]\n> Esta experiencia de codificación en línea se encuentra disponible actualmente en versión preliminar. Si tiene problemas, notifíquelos [en el repositorio de dotnet/try](https://github.com/dotnet/try/issues).\n"
- title: "Desafío completo"
  durationInMinutes: 1
  content: "Ha completado el inicio rápido \"números en C#\". \n\nPuede seguir estas guías rápidas en su propio entorno de desarrollo. El tema de .NET [empezar a trabajar en 10 minutos](https://www.microsoft.com/net/core) tiene instrucciones sobre cómo configurar el entorno de desarrollo local. Una vez hecho esto, continúe con [bifurcaciones y bucles](branches-and-loops-local.md) en su entorno local.\n\nPuede obtener más información sobre los números en C# en los temas siguientes:\n\n[Tabla de tipos enteros](../language-reference/keywords/integral-types-table.md)   \n[Tabla de tipos de punto flotante](../language-reference/keywords/floating-point-types-table.md)   \n[Tabla de tipos integrados](../language-reference/keywords/built-in-types-table.md)   \n[Tabla de conversiones numéricas implícitas](../language-reference/keywords/implicit-numeric-conversions-table.md)   \n[Tabla de conversiones numéricas explícitas](../language-reference/keywords/explicit-numeric-conversions-table.md)\0"
