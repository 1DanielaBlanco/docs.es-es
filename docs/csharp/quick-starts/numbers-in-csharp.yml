### YamlMime:YamlDocument
documentType: Tutorial
title: '<span data-ttu-id="214cb-101">Números en C#</span><span class="sxs-lookup"><span data-stu-id="214cb-101">Numbers in C#</span></span>'
metadata:
  title: '<span data-ttu-id="214cb-102">Números en C#</span><span class="sxs-lookup"><span data-stu-id="214cb-102">Numbers in C#</span></span>'
  description: '<span data-ttu-id="214cb-103">En este tutorial sobre los tipos numéricos, se usará el explorador para aprender a utilizar C# de forma interactiva.</span><span class="sxs-lookup"><span data-stu-id="214cb-103">In this tutorial about numeric types, you''ll use your browser to learn C# interactively.</span></span> <span data-ttu-id="214cb-104">Va a escribir código de C# y a ver los resultados de la compilación y la ejecución del código directamente en el explorador.</span><span class="sxs-lookup"><span data-stu-id="214cb-104">You''re going to write C# code and see the results of compiling and running your code directly in the browser.</span></span>'
  audience: Developer
  level: Beginner
  nextTutorialHref: branches-and-loops
  nextTutorialTitle: 'Branches and loops in C#'
  displayType: two-column
  interactive: csharp
items:
  - durationInMinutes: 1
    content: |
      <span data-ttu-id="214cb-105">En este tutorial se ofrece información sobre el uso de los tipos numéricos en C# de forma interactiva, con el uso del explorador para escribir código de C# y ver los resultados de la compilación y ejecución del código.</span><span class="sxs-lookup"><span data-stu-id="214cb-105">This tutorial teaches you about the number types in C# interactively, using your browser to write C# and see the results of compiling and running your code.</span></span> <span data-ttu-id="214cb-106">Contiene una serie de lecciones que ofrecen información detallada sobre los números y las operaciones matemáticas en C#.</span><span class="sxs-lookup"><span data-stu-id="214cb-106">It contains a series of lessons that explore numbers and math operations in C#.</span></span> <span data-ttu-id="214cb-107">En ellas se enseñan los aspectos básicos del lenguaje C#.</span><span class="sxs-lookup"><span data-stu-id="214cb-107">These lessons teach you the fundamentals of the C# language.</span></span>
  - title: <span data-ttu-id="214cb-108">Análisis de las operaciones matemáticas con enteros</span><span class="sxs-lookup"><span data-stu-id="214cb-108">Explore integer math</span></span>
    durationInMinutes: 4
    content: |
      <span data-ttu-id="214cb-109">Ejecute el código siguiente en la ventana interactiva.</span><span class="sxs-lookup"><span data-stu-id="214cb-109">Run the following code in the interactive window.</span></span> <span data-ttu-id="214cb-110">Para ello, escriba el siguiente bloque de código en la ventana interactiva y haga clic en el botón **Ejecutar**:</span><span class="sxs-lookup"><span data-stu-id="214cb-110">To do that, type the following code block in the interactive window and click the **Run** button:</span></span>

      ```csharp
      int a = 18;
      int b = 6;
      int c = a + b;
      Console.WriteLine(c);
      ```

      <span data-ttu-id="214cb-111">Ya ha visto una de las operaciones matemáticas fundamentales con enteros.</span><span class="sxs-lookup"><span data-stu-id="214cb-111">You've just seen one of the fundamental math operations with integers.</span></span> <span data-ttu-id="214cb-112">El tipo `int` representa un **entero**, que puede ser un número entero positivo o negativo.</span><span class="sxs-lookup"><span data-stu-id="214cb-112">The `int` type represents an **integer**, a positive or negative whole number.</span></span> <span data-ttu-id="214cb-113">Use el símbolo `+` para la suma.</span><span class="sxs-lookup"><span data-stu-id="214cb-113">You use the `+` symbol for addition.</span></span> <span data-ttu-id="214cb-114">Otros operadores matemáticos comunes con enteros son:</span><span class="sxs-lookup"><span data-stu-id="214cb-114">Other common mathematical operations for integers include:</span></span>

      - <span data-ttu-id="214cb-115">`-` para resta</span><span class="sxs-lookup"><span data-stu-id="214cb-115">`-` for subtraction</span></span>
      - <span data-ttu-id="214cb-116">`*` para multiplicación</span><span class="sxs-lookup"><span data-stu-id="214cb-116">`*` for multiplication</span></span>
      - <span data-ttu-id="214cb-117">`/` para división</span><span class="sxs-lookup"><span data-stu-id="214cb-117">`/` for division</span></span>

      > [!TIP]
      > <span data-ttu-id="214cb-118">En este tutorial, puede indagar por su cuenta con la modificación del código que ha escrito en la ventana interactiva.</span><span class="sxs-lookup"><span data-stu-id="214cb-118">Throughout this tutorial, you can explore on your own by modifying the code you've written in the interactive window.</span></span> <span data-ttu-id="214cb-119">Este tutorial proporciona ejemplos que puede probar en cada paso.</span><span class="sxs-lookup"><span data-stu-id="214cb-119">This tutorial provides examples that you can try at each step.</span></span>

      <span data-ttu-id="214cb-120">Comience por explorar esas operaciones diferentes.</span><span class="sxs-lookup"><span data-stu-id="214cb-120">Start by exploring those different operations.</span></span> <span data-ttu-id="214cb-121">Modifique la tercera línea para probar cada una de estas operaciones.</span><span class="sxs-lookup"><span data-stu-id="214cb-121">Modify the third line to try each of these operations.</span></span> <span data-ttu-id="214cb-122">Después de cada modificación, haga clic en el botón **Ejecutar**.</span><span class="sxs-lookup"><span data-stu-id="214cb-122">After each edit, click the **Run** button.</span></span>

      <span data-ttu-id="214cb-123">Resta:</span><span class="sxs-lookup"><span data-stu-id="214cb-123">Subtraction:</span></span>

      ```csharp
      int c = a - b;
      ```

      <span data-ttu-id="214cb-124">Multiplicación:</span><span class="sxs-lookup"><span data-stu-id="214cb-124">Multiplication:</span></span>

      ```csharp
      int c = a * b;
      ```

      <span data-ttu-id="214cb-125">División:</span><span class="sxs-lookup"><span data-stu-id="214cb-125">Division:</span></span> 

      ```csharp
      int c = a / b;
      ```

      <span data-ttu-id="214cb-126">Si lo desea, también puede experimentar con la realización de varias operaciones matemáticas en la misma línea.</span><span class="sxs-lookup"><span data-stu-id="214cb-126">You can also experiment by performing multiple mathematics operations in the same line, if you'd like.</span></span>

      > [!TIP]
      > <span data-ttu-id="214cb-127">Cuando explore C# o cualquier otro lenguaje de programación, cometerá errores al escribir código.</span><span class="sxs-lookup"><span data-stu-id="214cb-127">As you explore C# (or any programming language), you'll make mistakes when you write code.</span></span> <span data-ttu-id="214cb-128">El **compilador** buscará dichos errores y los notificará.</span><span class="sxs-lookup"><span data-stu-id="214cb-128">The **compiler** will find those errors and report them to you.</span></span> <span data-ttu-id="214cb-129">Si la salida contiene mensajes de error, revise detenidamente el ejemplo de código y el código de la ventana interactiva para saber qué debe corregir.</span><span class="sxs-lookup"><span data-stu-id="214cb-129">When the output contains error messages, look closely at the example code, and the code in the interactive window to see what to fix.</span></span>
      > <span data-ttu-id="214cb-130">Este ejercicio le ayudará a aprender la estructura del código de C#.</span><span class="sxs-lookup"><span data-stu-id="214cb-130">That exercise will help you learn the structure of C# code.</span></span>     

      > [!NOTE]
      > <span data-ttu-id="214cb-131">Esta experiencia de codificación en línea se encuentra disponible actualmente en versión preliminar.</span><span class="sxs-lookup"><span data-stu-id="214cb-131">This online coding experience is in preview mode.</span></span> <span data-ttu-id="214cb-132">Si tiene problemas, notifíquelos [en el repositorio de dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="214cb-132">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
  - title: <span data-ttu-id="214cb-133">Análisis sobre el orden de las operaciones</span><span class="sxs-lookup"><span data-stu-id="214cb-133">Explore order of operations</span></span>
    durationInMinutes: 7
    content: |
      <span data-ttu-id="214cb-134">El lenguaje C# define la prioridad de las diferentes operaciones matemáticas con reglas compatibles con las reglas aprendidas en las operaciones matemáticas.</span><span class="sxs-lookup"><span data-stu-id="214cb-134">The C# language defines the precedence of different mathematics operations with rules consistent with the rules you learned in mathematics.</span></span>
      <span data-ttu-id="214cb-135">La multiplicación y división tienen prioridad sobre la suma y resta.</span><span class="sxs-lookup"><span data-stu-id="214cb-135">Multiplication and division take precedence over addition and subtraction.</span></span>
      <span data-ttu-id="214cb-136">Indague sobre ello con la ejecución del código siguiente en la ventana interactiva:</span><span class="sxs-lookup"><span data-stu-id="214cb-136">Explore that by running the following code in the interactive window:</span></span>

      ```csharp
      int a = 5;
      int b = 4;
      int c = 2;
      int d = a + b * c;
      Console.WriteLine(d);
      ```

      <span data-ttu-id="214cb-137">La salida muestra que la multiplicación se realiza antes que la suma.</span><span class="sxs-lookup"><span data-stu-id="214cb-137">The output demonstrates that the multiplication is performed before the addition.</span></span>

      <span data-ttu-id="214cb-138">Puede forzar la ejecución de un orden diferente de las operaciones si la operación o las operaciones que realizó primero se incluyen entre paréntesis:</span><span class="sxs-lookup"><span data-stu-id="214cb-138">You can force a different order of operation by adding parentheses around the operation or operations you want performed first:</span></span>

      ```csharp
      int a = 5;
      int b = 4;
      int c = 2;
      int d = (a  + b) * c;
      Console.WriteLine(d);
      ```

      <span data-ttu-id="214cb-139">Combine muchas operaciones distintas para indagar más.</span><span class="sxs-lookup"><span data-stu-id="214cb-139">Explore more by combining many different operations.</span></span> <span data-ttu-id="214cb-140">Reemplace la cuarta línea anterior con algo parecido a esto:</span><span class="sxs-lookup"><span data-stu-id="214cb-140">Replace the fourth line above with something like this:</span></span>

      ```csharp
      int d = (a + b) - 6 * c + (12 * 4) / 3 + 12;
      ```

      <span data-ttu-id="214cb-141">Puede que haya observado un comportamiento interesante de los enteros.</span><span class="sxs-lookup"><span data-stu-id="214cb-141">You may have noticed an interesting behavior for integers.</span></span> <span data-ttu-id="214cb-142">La división de enteros siempre genera un entero como resultado, incluso cuando el resultado matemático incluya un decimal o una parte de una fracción.</span><span class="sxs-lookup"><span data-stu-id="214cb-142">Integer division always produces an integer result, even when the mathematical result would include a decimal or fraction portion.</span></span>

      <span data-ttu-id="214cb-143">Si no ha observado este comportamiento, pruebe lo siguiente:</span><span class="sxs-lookup"><span data-stu-id="214cb-143">If you haven't seen this behavior, try the following:</span></span>

      ```csharp
      int a = 7;
      int b = 4;
      int c = 3;
      int d = (a  + b) / c;
      Console.WriteLine(d);
      ```

      <span data-ttu-id="214cb-144">Vuelva a hacer clic en **Ejecutar** para ver los resultados.</span><span class="sxs-lookup"><span data-stu-id="214cb-144">Click **Run** again to see the results.</span></span>

      > [!NOTE]
      > <span data-ttu-id="214cb-145">Esta experiencia de codificación en línea se encuentra disponible actualmente en versión preliminar.</span><span class="sxs-lookup"><span data-stu-id="214cb-145">This online coding experience is in preview mode.</span></span> <span data-ttu-id="214cb-146">Si tiene problemas, notifíquelos [en el repositorio de dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="214cb-146">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
  - title: <span data-ttu-id="214cb-147">Información sobre los límites y la precisión de los enteros</span><span class="sxs-lookup"><span data-stu-id="214cb-147">Explore integer precision and limits</span></span>
    durationInMinutes: 5
    content: |
      <span data-ttu-id="214cb-148">En el último ejemplo se ha mostrado que la división de enteros trunca el resultado.</span><span class="sxs-lookup"><span data-stu-id="214cb-148">That last sample showed you that integer division truncates the result.</span></span>
      <span data-ttu-id="214cb-149">Puede obtener el **resto** con el operador de **módulo**, el carácter `%`:</span><span class="sxs-lookup"><span data-stu-id="214cb-149">You can get the **remainder** by using the **modulo** operator, the `%` character:</span></span>

      ```csharp
      int a = 7;
      int b = 4;
      int c = 3;
      int d = (a  + b) / c;
      int e = (a + b) % c;
      Console.WriteLine("quotient: " + d);
      Console.WriteLine("remainder: " + e);
      ```

      <span data-ttu-id="214cb-150">El tipo de entero de C# difiere de los enteros matemáticos en un aspecto: el tipo `int` tiene límites mínimo y máximo.</span><span class="sxs-lookup"><span data-stu-id="214cb-150">The C# integer type differs from mathematical integers in one other way: the `int` type has minimum and maximum limits.</span></span> <span data-ttu-id="214cb-151">Ejecute este código en la ventana interactiva para ver esos límites:</span><span class="sxs-lookup"><span data-stu-id="214cb-151">Run this code in the interactive window to see those limits:</span></span>

      ```csharp
      int max = int.MaxValue;
      int min = int.MinValue;
      Console.WriteLine("The range of integers is " + min + " to " + max);
      ```

      <span data-ttu-id="214cb-152">Si un cálculo genera un valor que supera los límites, se producirá una condición de **subdesbordamiento** o **desbordamiento**.</span><span class="sxs-lookup"><span data-stu-id="214cb-152">If a calculation produces a value that exceeds those limits, you have an **underflow** or **overflow** condition.</span></span> <span data-ttu-id="214cb-153">La respuesta parece ajustarse de un límite al otro.</span><span class="sxs-lookup"><span data-stu-id="214cb-153">The answer appears to wrap from one limit to the other.</span></span> <span data-ttu-id="214cb-154">Agregue estas dos líneas en la ventana interactiva para ver un ejemplo:</span><span class="sxs-lookup"><span data-stu-id="214cb-154">Add these two lines to the interactive window to see an example:</span></span>

      ```csharp
      int what = max + 3;
      Console.WriteLine("An example of overflow: " + what);
      ```

      <span data-ttu-id="214cb-155">Tenga en cuenta que la respuesta está muy próxima al entero mínimo (negativo).</span><span class="sxs-lookup"><span data-stu-id="214cb-155">Notice that the answer is very close to the minimum (negative) integer.</span></span> <span data-ttu-id="214cb-156">Es lo mismo que `min + 2`.</span><span class="sxs-lookup"><span data-stu-id="214cb-156">It's the same as `min + 2`.</span></span> <span data-ttu-id="214cb-157">La operación de suma **desbordó** los valores permitidos para los enteros.</span><span class="sxs-lookup"><span data-stu-id="214cb-157">The addition operation **overflowed** the allowed values for integers.</span></span>
      <span data-ttu-id="214cb-158">La respuesta es un número negativo muy grande porque un desbordamiento "se ajusta" desde el valor de entero más alto posible al más bajo.</span><span class="sxs-lookup"><span data-stu-id="214cb-158">The answer is a very large negative number because an overflow "wraps around" from the largest possible integer value to the smallest.</span></span>

      <span data-ttu-id="214cb-159">Hay otros tipos numéricos con distintos límites y precisiones que podría usar si el tipo `int` no satisface sus necesidades.</span><span class="sxs-lookup"><span data-stu-id="214cb-159">There are other numeric types with different limits and precision that you would use when the `int` type doesn't meet your needs.</span></span> <span data-ttu-id="214cb-160">Veámoslo a continuación.</span><span class="sxs-lookup"><span data-stu-id="214cb-160">Let's explore those next.</span></span>

      > [!NOTE]
      > <span data-ttu-id="214cb-161">Esta experiencia de codificación en línea se encuentra disponible actualmente en versión preliminar.</span><span class="sxs-lookup"><span data-stu-id="214cb-161">This online coding experience is in preview mode.</span></span> <span data-ttu-id="214cb-162">Si tiene problemas, notifíquelos [en el repositorio de dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="214cb-162">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
  - title: <span data-ttu-id="214cb-163">Operaciones con el tipo double</span><span class="sxs-lookup"><span data-stu-id="214cb-163">Work with the double type</span></span>
    durationInMinutes: 5
    content: |
      <span data-ttu-id="214cb-164">El tipo numérico `double` representa números de punto flotante de doble precisión.</span><span class="sxs-lookup"><span data-stu-id="214cb-164">The `double` numeric type represents a double-precision floating point number.</span></span> <span data-ttu-id="214cb-165">Puede que no esté familiarizado con estos términos.</span><span class="sxs-lookup"><span data-stu-id="214cb-165">Those terms may be new to you.</span></span> <span data-ttu-id="214cb-166">Un número de **punto flotante** resulta útil para representar números no enteros cuya magnitud puede ser muy grande o pequeña.</span><span class="sxs-lookup"><span data-stu-id="214cb-166">A **floating point** number is useful to represent non-integral numbers that may be very large, or small in magnitude.</span></span> <span data-ttu-id="214cb-167">**Doble precisión** significa que estos números se almacenan con mayor precisión que en el caso de la **precisión sencilla**.</span><span class="sxs-lookup"><span data-stu-id="214cb-167">**Double-precision** means that these numbers are stored using greater precision than **single-precision**.</span></span> <span data-ttu-id="214cb-168">En los equipos modernos, es más habitual utilizar números con doble precisión que con precisión sencilla.</span><span class="sxs-lookup"><span data-stu-id="214cb-168">On modern computers, it is more common to use double precision than single precision numbers.</span></span>
      <span data-ttu-id="214cb-169">Comencemos a explorar.</span><span class="sxs-lookup"><span data-stu-id="214cb-169">Let's explore.</span></span> <span data-ttu-id="214cb-170">Pruebe el código siguiente en la ventana interactiva y observe el resultado:</span><span class="sxs-lookup"><span data-stu-id="214cb-170">Try the following code in the interactive window and see the result:</span></span>

      ```csharp
      double a = 5;
      double b = 4;
      double c = 2;
      double d = (a  + b) / c;
      Console.WriteLine(d);
      ```

      <span data-ttu-id="214cb-171">Tenga en cuenta que la respuesta incluye la parte decimal del cociente.</span><span class="sxs-lookup"><span data-stu-id="214cb-171">Notice that the answer includes the decimal portion of the quotient.</span></span> <span data-ttu-id="214cb-172">Pruebe una expresión algo más complicada con tipos double:</span><span class="sxs-lookup"><span data-stu-id="214cb-172">Try a slightly more complicated expression with doubles:</span></span>

      ```csharp
      double a = 19;
      double b = 23;
      double c = 8;
      double d = (a  + b) / c;
      Console.WriteLine(d);
      ```

      <span data-ttu-id="214cb-173">El intervalo de un valor double es mucho más amplio que en el caso de los valores enteros.</span><span class="sxs-lookup"><span data-stu-id="214cb-173">The range of a double value is much greater than integer values.</span></span> <span data-ttu-id="214cb-174">Pruebe el código siguiente en la ventana interactiva:</span><span class="sxs-lookup"><span data-stu-id="214cb-174">Try the following code in the interactive window:</span></span>

      ```csharp
      double max = double.MaxValue;
      double min = double.MinValue;
      Console.WriteLine("The range of double is " + min + " to " + max);
      ```

      <span data-ttu-id="214cb-175">Estos valores se imprimen para representar la notación científica.</span><span class="sxs-lookup"><span data-stu-id="214cb-175">These values are printed out to represent scientific notation.</span></span> <span data-ttu-id="214cb-176">El número a la izquierda de `E` es el significativo.</span><span class="sxs-lookup"><span data-stu-id="214cb-176">The number to the left of the `E` is the significant.</span></span> <span data-ttu-id="214cb-177">El número a la derecha es el exponente, como una potencia de diez.</span><span class="sxs-lookup"><span data-stu-id="214cb-177">The number to the right is the exponent, as a power of 10.</span></span> <span data-ttu-id="214cb-178">Internamente, estos números se representan de forma similar, pero en un formato binario.</span><span class="sxs-lookup"><span data-stu-id="214cb-178">Internally, these numbers are represented similarly, but in a binary form.</span></span> <span data-ttu-id="214cb-179">Una parte representa los dígitos binarios significativos.</span><span class="sxs-lookup"><span data-stu-id="214cb-179">One part represents the significant binary digits.</span></span>
      <span data-ttu-id="214cb-180">Otra parte representa dónde colocar el punto binario (similar a un punto decimal) en relación con dichos dígitos significativos.</span><span class="sxs-lookup"><span data-stu-id="214cb-180">Another part represents where to place the binary point (analogous to a decimal point) relative to those significant digits.</span></span>

      <span data-ttu-id="214cb-181">Al igual que sucede con los números decimales en las operaciones matemáticas, los tipos double en C# pueden presentar errores de redondeo.</span><span class="sxs-lookup"><span data-stu-id="214cb-181">Just like decimal numbers in math, doubles in C# can have rounding errors.</span></span> <span data-ttu-id="214cb-182">Pruebe este código:</span><span class="sxs-lookup"><span data-stu-id="214cb-182">Try this code:</span></span>

      ```csharp
      double third = 1.0 / 3.0;
      Console.WriteLine(third);
      ```

      <span data-ttu-id="214cb-183">Sabe que repetir `0.3` no es exactamente lo mismo que `1/3`.</span><span class="sxs-lookup"><span data-stu-id="214cb-183">You know that `0.3` repeating is not exactly the same as `1/3`.</span></span>

      <span data-ttu-id="214cb-184">***Desafío***</span><span class="sxs-lookup"><span data-stu-id="214cb-184">***Challenge***</span></span>

      <span data-ttu-id="214cb-185">Pruebe otros cálculos con números grandes, números pequeños, multiplicaciones y divisiones con el tipo `double`.</span><span class="sxs-lookup"><span data-stu-id="214cb-185">Try other calculations with large numbers, small numbers, multiplication and division using the `double` type.</span></span>  <span data-ttu-id="214cb-186">Intente realizar cálculos más complicados.</span><span class="sxs-lookup"><span data-stu-id="214cb-186">Try more complicated calculations.</span></span>

      > [!NOTE]
      > <span data-ttu-id="214cb-187">Esta experiencia de codificación en línea se encuentra disponible actualmente en versión preliminar.</span><span class="sxs-lookup"><span data-stu-id="214cb-187">This online coding experience is in preview mode.</span></span> <span data-ttu-id="214cb-188">Si tiene problemas, notifíquelos [en el repositorio de dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="214cb-188">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
  - title: <span data-ttu-id="214cb-189">Operaciones con tipos de punto fijo</span><span class="sxs-lookup"><span data-stu-id="214cb-189">Work with fixed point types</span></span>
    durationInMinutes: 8
    content: |
      <span data-ttu-id="214cb-190">Hasta el momento ha visto los tipos numéricos básicos en C#: los tipos integer y double.</span><span class="sxs-lookup"><span data-stu-id="214cb-190">You've seen the basic numeric types in C#: integers and doubles.</span></span>  <span data-ttu-id="214cb-191">Sin embargo, hay otro tipo más que debe aprender: el tipo `decimal`.</span><span class="sxs-lookup"><span data-stu-id="214cb-191">There is one other type to learn: the `decimal` type.</span></span> <span data-ttu-id="214cb-192">El tipo `decimal` tiene un intervalo más pequeño, pero mayor precisión que `double`.</span><span class="sxs-lookup"><span data-stu-id="214cb-192">The `decimal` type has a smaller range, but greater precision than `double`.</span></span> <span data-ttu-id="214cb-193">El término **punto fijo** significa que el punto decimal o el punto binario no se mueven.</span><span class="sxs-lookup"><span data-stu-id="214cb-193">The term **fixed point** means that the decimal point (or binary point) doesn't move.</span></span> <span data-ttu-id="214cb-194">Observemos lo siguiente:</span><span class="sxs-lookup"><span data-stu-id="214cb-194">Let's take a look:</span></span>

      ```csharp
      decimal min = decimal.MinValue;
      decimal max = decimal.MaxValue;
      Console.WriteLine("The range of the decimal type is " + min + " to " + max);
      ```

      <span data-ttu-id="214cb-195">Tenga en cuenta que el intervalo es más pequeño que con el tipo `double`.</span><span class="sxs-lookup"><span data-stu-id="214cb-195">Notice that the range is smaller than the `double` type.</span></span> <span data-ttu-id="214cb-196">Puede observar una precisión mayor con el tipo decimal si prueba el siguiente código:</span><span class="sxs-lookup"><span data-stu-id="214cb-196">You can see the greater precision with the decimal type by trying the following code:</span></span>

      ```csharp
      double a = 1.0;
      double b = 3.0;
      Console.WriteLine(a / b);

      decimal c = 1.0M;
      decimal d = 3.0M;
      Console.WriteLine(c / d);
      ```

      <span data-ttu-id="214cb-197">El sufijo `M` en los números es la forma de indicar que una constante debe usar el tipo `decimal`.</span><span class="sxs-lookup"><span data-stu-id="214cb-197">The `M` suffix on the numbers is how you indicate that a constant should use the `decimal` type.</span></span>

      <span data-ttu-id="214cb-198">Observe que la expresión matemática con el tipo decimal tiene más dígitos a la derecha del punto decimal.</span><span class="sxs-lookup"><span data-stu-id="214cb-198">Notice that the math using the decimal type has more digits to the right of the decimal point.</span></span> 

      <span data-ttu-id="214cb-199">***Desafío***</span><span class="sxs-lookup"><span data-stu-id="214cb-199">***Challenge***</span></span>

      <span data-ttu-id="214cb-200">Ahora que ya conoce los diferentes tipos numéricos, escriba código para calcular el área de un círculo cuyo radio sea de 6,35 cm.</span><span class="sxs-lookup"><span data-stu-id="214cb-200">Now that you've seen the different numeric types, write code that calculates the area of a circle whose radius is 2.50 inches.</span></span> <span data-ttu-id="214cb-201">Recuerde que el área de un circulo es igual al valor de su radio elevado al cuadrado multiplicado por Pi.</span><span class="sxs-lookup"><span data-stu-id="214cb-201">Remember that the area of a circle is the radius squared multiplied by PI.</span></span> <span data-ttu-id="214cb-202">Sugerencia: C# contiene una constante de Pi: `Math.PI`, que puede usar para ese valor.</span><span class="sxs-lookup"><span data-stu-id="214cb-202">One hint: C# contains a constant for PI: `Math.PI` that you can use for that value.</span></span> 

      > [!NOTE]
      > <span data-ttu-id="214cb-203">Esta experiencia de codificación en línea se encuentra disponible actualmente en versión preliminar.</span><span class="sxs-lookup"><span data-stu-id="214cb-203">This online coding experience is in preview mode.</span></span> <span data-ttu-id="214cb-204">Si tiene problemas, notifíquelos [en el repositorio de dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="214cb-204">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
  - title: <span data-ttu-id="214cb-205">Desafío completo</span><span class="sxs-lookup"><span data-stu-id="214cb-205">Complete challenge</span></span>
    durationInMinutes: 1
    content: |
      <span data-ttu-id="214cb-206">Ha completado el tutorial "Números en C#".</span><span class="sxs-lookup"><span data-stu-id="214cb-206">You've completed the "Numbers in C#" tutorial.</span></span> <span data-ttu-id="214cb-207">Puede obtener más información sobre los números en C# en los temas siguientes:</span><span class="sxs-lookup"><span data-stu-id="214cb-207">You can learn more about numbers in C# in the following topics:</span></span>

      <span data-ttu-id="214cb-208">[Tabla de tipos enteros](../language-reference/keywords/integral-types-table.md) </span><span class="sxs-lookup"><span data-stu-id="214cb-208">[Integral Types Table](../language-reference/keywords/integral-types-table.md) </span></span>  
      <span data-ttu-id="214cb-209">[Tabla de tipos de punto flotante](../language-reference/keywords/floating-point-types-table.md) </span><span class="sxs-lookup"><span data-stu-id="214cb-209">[Floating-Point Types Table](../language-reference/keywords/floating-point-types-table.md) </span></span>  
      <span data-ttu-id="214cb-210">[Tabla de tipos integrados](../language-reference/keywords/built-in-types-table.md) </span><span class="sxs-lookup"><span data-stu-id="214cb-210">[Built-In Types Table](../language-reference/keywords/built-in-types-table.md) </span></span>  
      <span data-ttu-id="214cb-211">[Tabla de conversiones numéricas implícitas](../language-reference/keywords/implicit-numeric-conversions-table.md) </span><span class="sxs-lookup"><span data-stu-id="214cb-211">[Implicit Numeric Conversions Table](../language-reference/keywords/implicit-numeric-conversions-table.md) </span></span>  
      [<span data-ttu-id="214cb-212">Tabla de conversiones numéricas explícitas</span><span class="sxs-lookup"><span data-stu-id="214cb-212">Explicit Numeric Conversions Table</span></span>](../language-reference/keywords/explicit-numeric-conversions-table.md)