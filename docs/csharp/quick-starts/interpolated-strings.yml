### YamlMime:Tutorial
title: Cadenas interpoladas en C#
metadata:
  title: "Tutorial interactivo de cadenas interpoladas: tutoriales rápidos de C#"
  description: "En este tutorial, usará el explorador para utilizar la característica de cadena interpolada de C# de manera interactiva. Escriba código de C# y vea los resultados de la compilación y la ejecución del código directamente en el explorador."
  audience: Developer
  ms.custom: mvc
  ms.topic: get-started-article
  level: Beginner
  displayType: two-column
  interactive: csharp
  nextTutorialHref: list-collection
  nextTutorialTitle: Colecciones en C#
  ms.openlocfilehash: 56c7cf5f6ce0c5db27ba43eeaffd9eb2e08f8c8a
  ms.sourcegitcommit: d2da0142247ef42a219a5d2907f153e62dc6ea0d
  ms.translationtype: HT
  ms.contentlocale: es-ES
  ms.lasthandoff: 02/01/2018
items:
- durationInMinutes: 2
  content: "En este inicio rápido aprenderá a usar cadenas interpoladas en C# para insertar valores en una cadena de salida única de forma interactiva. Se usa el explorador para escribir código de C#, lo que permite ver al instante los resultados de compilar y ejecutar el código. El inicio rápido contiene una serie de lecciones que concatenan cadenas, insertan valores en cadenas y dan formato a estos valores de maneras diferentes.\n"
- title: Crear una cadena interpolada
  durationInMinutes: 2
  content: "Ejecute el código siguiente en la ventana interactiva. Para ello, escriba el siguiente bloque de código en la ventana interactiva (reemplace \"\\<name>\" con su nombre) y haga clic en el botón **Ejecutar**:\n\n```csharp\nvar name = \"<name>\";\nConsole.WriteLine($\"Hello, {name}. It's a pleasure to meet you!\");\n```\n\nAl ejecutar el programa, se muestra una cadena única que incluye su nombre en el saludo. La cadena que se incluye en la llamada al método <xref:System.Console.WriteLine%2A> es una *cadena interpolada*. Es un tipo de plantilla que permite construir una sola cadena (denominada *cadena de resultado*) a partir de una cadena que incluye código incrustado. Las cadenas interpoladas son especialmente útiles para insertar valores en una cadena o en cadenas concatenadas (unidas entre sí). \n\nEste sencillo ejemplo contiene los dos elementos que debe tener cada cadena interpolada: \n\n- Un literal de cadena que empieza con el carácter `$` antes del carácter de comillas de apertura. No puede haber ningún espacio entre el símbolo `$` y el carácter de comillas. (Si quiere ver qué ocurre si incluye uno, inserte un espacio después del carácter `$` en la ventana interactiva y haga clic en el botón **Ejecutar**. El compilador de C# muestra el error: \"Carácter no esperado '$'\"). \n\n- Una o varias *expresiones interpoladas*. Una expresión interpolada se indica mediante una llave de apertura y de cierre (`{` y `}`). Puede colocar cualquier expresión de C# que devuelva un valor (incluido `null`) dentro de las llaves. \n\nProbemos algunos ejemplos más de cadenas interpoladas con otros tipos de datos.\n\n> [!NOTE]\n> Esta experiencia de codificación en línea se encuentra disponible actualmente en versión preliminar. Si tiene problemas, notifíquelos [en el repositorio de dotnet/try](https://github.com/dotnet/try/issues).\n"
- title: Incluir diferentes tipos de datos
  durationInMinutes: 3
  content: "En el inicio rápido anterior, usó una cadena interpolada para insertar una cadena dentro de otra. Una expresión de cadena interpolada puede ser cualquier tipo de datos. Probemos una cadena interpolada que tiene valores de varios tipos de datos. \n\nEn este ejemplo se incluyen expresiones interpoladas con un objeto `Vegetable`, un miembro de la enumeración `Unit`, un valor <xref:System.DateTime> y un valor <xref:System.Decimal>. Ejecútela en la ventana interactiva.\n\n```csharp\npublic class Vegetable\n{\n   public Vegetable(string name) => Name = name;\n\n   public string Name { get; }\n\n   public override string ToString() => Name;\n}\n\npublic class Example\n{\n   public enum Unit { item, pound, ounce, dozen };\n\n   public static void Main()\n   {\n      var item = new Vegetable(\"eggplant\");\n      var date = DateTime.Now;\n      var price = 1.99m;\n      var unit = Unit.item;\n      Console.WriteLine($\"On {date}, the price of {item} was {price} per {unit}.\");\n   }\n}\n```\n\nTenga en cuenta que una de las expresiones interpoladas incluye el objeto `item` en la cadena de resultado que se muestra en la consola y, en este caso, se inserta la cadena \"eggplant\" en la cadena de resultado. La razón de esto es que, cuando el tipo de una expresión interpolada no es una cadena, el compilador de C# hace lo siguiente:\n\n- Si la expresión interpolada es `null`, la expresión interpolada devuelve una cadena vacía (\"\" o <xref:System.String.Empty?displayProperty=nameWithType>).\n\n- Si la expresión interpolada no es `null`, se llama al método `ToString` del tipo de la expresión interpolada. Para probar esto, inserte un comentario en la definición del método `Vegetable.ToString` colocando delante de él un símbolo de comentario (`//`). En el resultado, la cadena \"eggplant\" se reemplaza por el nombre de tipo completo (el espacio de nombres definido por REPL de C# junto con el nombre de tipo), que es el comportamiento predeterminado del método <xref:System.Object.ToString?displayProperty=nameWithType>.   \n\nEn el resultado de este ejemplo, la fecha es demasiado precisa (el precio de \"eggplant\" no varía por segundos) y el valor del precio no indica una unidad de moneda. En el paso siguiente, aprenderá a corregir esos problemas controlando el formato de cadenas devueltas por expresiones interpoladas.\n\n> [!NOTE]\n> Esta experiencia de codificación en línea se encuentra disponible actualmente en versión preliminar. Si tiene problemas, notifíquelos [en el repositorio de dotnet/try](https://github.com/dotnet/try/issues).\n"
- title: Controlar el formato de expresiones interpoladas
  durationInMinutes: 5
  content: "En la lección anterior, se insertaron en la cadena de resultado dos cadenas con formato incorrecto. Una era un valor de fecha y hora en la que solo la fecha era apropiada. La segunda era un precio que no indicaba su unidad de moneda. Ambos problemas se podían solucionar fácilmente. Las expresiones interpoladas pueden incluir *cadenas de formato* que controlan el formato de tipos específicos. Modifique la llamada a `Console.WriteLine` desde el ejemplo anterior para incluir el especificador de formato para los campos de fecha y precio, tal y como se muestra en esta línea:\n\n```csharp\nConsole.WriteLine($\"On {date:d}, the price of {item} was {price:C2} per {unit}.\");\n```\n\nEspecifique una cadena de formato siguiendo la expresión interpolada con dos puntos y la cadena de formato. \"d\" es una [cadena de formato de fecha y hora estándar](../../standard/base-types/standard-date-and-time-format-strings.md#the-short-date-d-format-specifier) que representa el formato de fecha corta. \"C2\" es una [cadena de formato numérico estándar](../../standard/base-types/standard-numeric-format-strings.md#the-currency-c-format-specifier) que representa un número como un valor de moneda con dos dígitos después del separador decimal.\n\nUn determinado número de tipos en las bibliotecas de .NET Standard admite un conjunto predefinido de cadenas de formato. Esto incluye todos los tipos numéricos y los tipos de fecha y hora. Para obtener una lista completa de los tipos que admiten cadenas de formato, vea [Dar formato a cadenas y tipos de biblioteca de clase .NET](../../standard/base-types/formatting-types.md#stringRef) en el artículo [Aplicar formato a tipos de .NET](../../standard/base-types/formatting-types.md). Cualquier tipo puede admitir un conjunto de cadenas de formato y también puede desarrollar extensiones de formato personalizadas que proporcionan el formato personalizado para los tipos existentes. Para más información sobre el formato personalizado mediante una implementación de <xref:System.ICustomFormatter>, vea [Formato personalizado con ICustomFormatter](../../standard/base-types/formatting-types.md#custom-formatting-with-icustomformatter) en el artículo [Aplicar formato a tipos de .NET](../../standard/base-types/formatting-types.md).\n\nIntente modificar las cadenas de formato en el **Editor de .NET** para ver cómo afectan al formato de fecha y hora y el valor numérico. Cambie \"d\" en `{date:d}` a \"t\" (para mostrar el formato de hora corta), \"y\" (para mostrar el año y el mes) y \"yyyy\" (para mostrar el año como un número de cuatro dígitos). Cambie \"C2\" en `{price:C2}` a \"e\" (para la notación exponencial) y \"F3\" (para un valor numérico con tres dígitos después del separador decimal).\n\nAdemás de controlar el formato, también puede controlar el ancho de campo y la alineación de las cadenas devueltas por una expresión interpolada. En el paso siguiente aprenderá a hacerlo.\n\n> [!NOTE]\n> Esta experiencia de codificación en línea se encuentra disponible actualmente en versión preliminar. Si tiene problemas, notifíquelos [en el repositorio de dotnet/try](https://github.com/dotnet/try/issues).\n"
- title: "Controlar el ancho de campo y la alineación de expresiones interpoladas"
  durationInMinutes: 6
  content: "Normalmente, cuando la cadena devuelta por una expresión interpolada se incluye en una cadena de resultado, no tiene espacios iniciales ni finales. Especialmente para instancias en las que se trabaja con un conjunto de datos, las expresiones interpoladas permiten especificar un ancho de campo y su alineación. Para ver esto, ejecute este código.\n\n```csharp\n  var inventory = new Dictionary<string, int>();\n  inventory.Add(\"hammer, ball pein\", 18);\n  inventory.Add(\"hammer, cross pein\", 5);\n  inventory.Add(\"screwdriver, Phillips #2\", 14);\n\n  Console.WriteLine($\"Inventory on {DateTime.Now:d}\");\n  Console.WriteLine(\" \");\n  Console.WriteLine($\"{\"Item\",-25}    {\"Quantity\",10}\");\n  Console.WriteLine(\" \"); \n  foreach (var item in inventory)\n     Console.WriteLine($\"{item.Key,-25}     {item.Value,10}\");\n```\n\nLos nombres de elemento están alineados a la izquierda y sus cantidades están alineadas a la derecha. Para especificar la alineación, se agrega una coma (\",\") después de la expresión y se designa el ancho de campo. Si el ancho de campo es un número positivo, el campo está alineado a la derecha:\n\n```text\n{expression, width}\n```\n\nSi el ancho de campo es un número negativo, el campo está alineado a la izquierda:\n\n```text\n{expression, -width}\n```\nPruebe a quitar el signo negativo de las expresiones interpoladas `{\"Item\",-25}` y `{item.Key,-25}`, y vuelva a ejecutar el ejemplo. En esta ocasión, el nombre de elemento está alineado a la derecha.\n\nPuede combinar un ancho de campo y una cadena de formato en una única expresión interpolada. El ancho de campo se muestra primero, seguido de dos puntos y la cadena de formato. Pruebe el siguiente programa sencillo que muestra tres cadenas con formato con los anchos de campo definidos.\n\n```csharp\nConsole.WriteLine($\"{DateTime.Now,-20:d} Hour {DateTime.Now,-10:HH} {1063.342,15:N2} feet\");\n```\n\n> [!NOTE]\n> Esta experiencia de codificación en línea se encuentra disponible actualmente en versión preliminar. Si tiene problemas, notifíquelos [en el repositorio de dotnet/try](https://github.com/dotnet/try/issues).\n"
- content: "Ha completado el inicio rápido sobre cadenas interpoladas. \n\nPuede continuar con estos inicios rápidos en su entorno de desarrollo local. Eche un vistazo a los conceptos básicos sobre [desarrollo local](local-environment.md) y después seleccione un inicio rápido. Puede realizar este mismo ejercicio: vaya directamente al siguiente inicio rápido o vuelva a empezar con el inicio rápido sobre [números en C#](numbers-in-csharp-local.md).\n\nPara aprender más sobre cómo trabajar con cadenas interpoladas, eche un vistazo al tema [Cadenas interpoladas](../language-reference/keywords/interpolated-strings.md) en la referencia de C#.\0"
