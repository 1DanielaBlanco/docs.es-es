### YamlMime:Tutorial
title: Colecciones en C#
metadata:
  title: Colecciones en C#. Aprenda a usar secuencias y colecciones en C#.
  description: "En este tutorial, usará el explorador para aprender a usar C# de forma interactiva. Escriba código de C# y vea los resultados de la compilación y la ejecución del código directamente en el explorador."
  audience: Developer
  ms.topic: get-started-article
  ms.custom: mvc
  level: Beginner
  displayType: two-column
  interactive: csharp
  ms.prod: .net
  ms.technology: devlang-csharp
  ms.openlocfilehash: 57cdf4e5c82c0e50de5422051df251db8ddb5d83
  ms.sourcegitcommit: 8bde7a3432f30fc771079744955c75c58c4eb393
  ms.translationtype: HT
  ms.contentlocale: es-ES
  ms.lasthandoff: 01/20/2018
items:
- durationInMinutes: 1
  content: "En este inicio rápido se enseña a usar C# de forma interactiva, con el uso del explorador para escribir código de C# y ver los resultados de la compilación y ejecución del código. Contiene una serie de lecciones en las que se crean, modifican y exploran colecciones y matrices.\n"
- title: "Creación de listas"
  durationInMinutes: 2
  content: "Ejecute el código siguiente en la ventana interactiva. Para ello, escriba el siguiente bloque de código en la ventana interactiva (reemplace \"<name>\" con su nombre) y haga clic en el botón **Ejecutar**:\n\n```csharp\nvar names = new List<string> { \"<name>\", \"Ana\", \"Felipe\" };\nforeach (var name in names)\n{\n  Console.WriteLine($\"Hello {name.ToUpper()}!\");\n}\n```\n\nHasta ahora, solo ha creado una lista de cadenas, ha agregado tres nombres a dicha lista y ha impreso los nombres en MAYÚSCULA. Los conceptos aplicados ya se han aprendido en los inicios rápidos anteriores para recorrer la lista.\n\nEl código para mostrar los nombres usa **cadenas interpoladas**.  Si un valor de `string` va precedido del carácter `$`, significa que puede insertar código de C# en la declaración de cadena. La cadena real reemplaza a ese código de C# con el valor que genera. En este ejemplo, reemplaza `{name.ToUpper()}` con cada nombre, convertido a mayúsculas, porque se llama al método <xref:System.String.ToUpper%2A>.\n\nVamos a continuar indagando.\n\n> [!NOTE]\n> Esta experiencia de codificación en línea se encuentra disponible actualmente en versión preliminar. Si tiene problemas, notifíquelos [en el repositorio de dotnet/try](https://github.com/dotnet/try/issues).\n"
- title: "Modificación del contenido de las listas"
  durationInMinutes: 3
  content: "La colección creada usa el tipo <xref:System.Collections.Generic.List%601>. Este tipo almacena las secuencias de elementos. Especifique el tipo de los elementos entre corchetes angulares.\n\nUn aspecto importante de este tipo <xref:System.Collections.Generic.List%601> es que se puede aumentar o reducir, lo que permite agregar o quitar elementos. Agregue el código siguiente debajo del código que ya haya escrito:\n\n```csharp\nConsole.WriteLine();\nnames.Add(\"Maria\");\nnames.Add(\"Bill\");\nnames.Remove(\"Ana\");\nforeach (var name in names)\n{\n  Console.WriteLine($\"Hello {name.ToUpper()}!\");\n}\n```\n\nSe han agregado dos nombres más al final de la lista. También se ha quitado uno.\n\n<xref:System.Collections.Generic.List%601> también permite hacer referencia a elementos individuales a través del **índice**. Puede acceder a los elementos con los tokens `[` y `]`. Agregue el código siguiente debajo del que ya haya escrito y pruébelo:\n\n```csharp\nConsole.WriteLine($\"My name is {names[0]}.\");\nConsole.WriteLine($\"I've added {names[2]} and {names[3]} to the list.\");\n```\n\nNo puede acceder a elementos que estén más allá del final de la lista. Puede comprobar durante cuánto tiempo la lista usa la propiedad <xref:System.Collections.Generic.List%601.Count%2A>. Agregue el código siguiente para probarlo:\n\n```csharp\nConsole.WriteLine($\"The list has {names.Count} people in it\");\n```\n\nVuelva a hacer clic en **Ejecutar** para ver los resultados. En C#, los índices empiezan en 0, por lo que el índice más grande válido es uno menos que el número de elementos de la lista.\n\n> [!NOTE]\n> Esta experiencia de codificación en línea se encuentra disponible actualmente en versión preliminar. Si tiene problemas, notifíquelos [en el repositorio de dotnet/try](https://github.com/dotnet/try/issues).\n"
- title: "Búsqueda y orden en las listas"
  durationInMinutes: 5
  content: "En los ejemplos se usan listas relativamente pequeñas, pero las aplicaciones a menudo pueden crear listas que contengan muchos más elementos, en ocasiones, con una numeración que engloba millares. Para encontrar elementos en estas colecciones más grandes, debe buscar diferentes elementos en la lista. El método <xref:System.Collections.Generic.List%601.IndexOf%2A> busca un elemento y devuelve su índice. Pruebe esto para ver cómo funciona.  Agregue el código siguiente debajo del que ha escrito hasta ahora:\n\n```csharp\nvar index = names.IndexOf(\"Felipe\");\nif (index != -1)\n  Console.WriteLine($\"The name {names[index]} is at index {index}\");\n\nvar notFound = names.IndexOf(\"Not Found\");\n  Console.WriteLine($\"When an item is not found, IndexOf returns {notFound}\");\n```\n\nNo puede saber si un elemento está en la lista, por lo que debe comprobar siempre el índice devuelto por <xref:System.Collections.Generic.List%601.IndexOf%2A>. Si es -1, significa que no se encontró el elemento.\n\nLos elementos de la lista también se pueden ordenar. El método <xref:System.Collections.Generic.List%601.Sort%2A> ordena todos los elementos de la lista en su orden normal (por orden alfabético si se trata de cadenas). Agregue este código y vuelva a ejecutarlo:\n\n```csharp\nnames.Sort();\nforeach (var name in names)\n{\n  Console.WriteLine($\"Hello {name.ToUpper()}!\");\n}\n```\n\n> [!NOTE]\n> Esta experiencia de codificación en línea se encuentra disponible actualmente en versión preliminar. Si tiene problemas, notifíquelos [en el repositorio de dotnet/try](https://github.com/dotnet/try/issues).\n"
- title: Listas de otros tipos
  durationInMinutes: 5
  content: "Hasta el momento, se ha usado el tipo `string` en las listas. Se va a crear una lista <xref:System.Collections.Generic.List%601> con un tipo distinto. Se va a crear una serie de números. Elimine el código que ha escrito hasta ahora y reemplácelo por este:\n\n```csharp\nvar fibonacciNumbers = new List<int> {1, 1};\n```\n\nSe crea una lista de enteros y se definen los dos primeros enteros con el valor 1. Son los dos primeros valores de una *sucesión de Fibonacci*, una secuencia de números. Cada número sucesivo de Fibonacci se obtiene con la suma de los dos números anteriores. Agregue este código:\n\n```csharp\nvar previous = fibonacciNumbers[fibonacciNumbers.Count - 1];\nvar previous2 = fibonacciNumbers[fibonacciNumbers.Count - 2];\n\nfibonacciNumbers.Add(previous + previous2);\n\nforeach(var item in fibonacciNumbers)\n    Console.WriteLine(item);\n```\n\nPresione **Ejecutar** para ver los resultados.\n\n> [!NOTE]\n> Esta experiencia de codificación en línea se encuentra disponible actualmente en versión preliminar. Si tiene problemas, notifíquelos [en el repositorio de dotnet/try](https://github.com/dotnet/try/issues).\n"
- title: "Desafío"
  durationInMinutes: 10
  content: "Trate de recopilar los conceptos que ha aprendido en esta lección y en las anteriores. Amplíe lo que ha creado hasta el momento con los números de Fibonacci. Pruebe y escriba el código para generar los veinte primeros números de la secuencia. (Como sugerencia, el 20º número de la serie de Fibonacci es 6765).\n\n> [!NOTE]\n> Esta experiencia de codificación en línea se encuentra disponible actualmente en versión preliminar. Si tiene problemas, notifíquelos [en el repositorio de dotnet/try](https://github.com/dotnet/try/issues).\n"
- title: "Desafío completo"
  durationInMinutes: 3
  content: "¿Ha obtenido algo parecido a lo siguiente?\n\n```csharp\nvar fibonacciNumbers = new List<int> {1, 1};\n\nwhile (fibonacciNumbers.Count < 20)\n{\n    var previous = fibonacciNumbers[fibonacciNumbers.Count - 1];\n    var previous2 = fibonacciNumbers[fibonacciNumbers.Count - 2];\n    \n    fibonacciNumbers.Add(previous + previous2);\n}\nforeach(var item in fibonacciNumbers)\n    Console.WriteLine(item);\n```\n\nCon cada iteración del bucle, se obtienen los dos últimos enteros de la lista, se suman y se agrega el valor resultante a la lista. El bucle se repite hasta que se hayan agregado veinte elementos a la lista.\n\n> [!NOTE]\n> Esta experiencia de codificación en línea se encuentra disponible actualmente en versión preliminar. Si tiene problemas, notifíquelos [en el repositorio de dotnet/try](https://github.com/dotnet/try/issues).\n"
- content: "Ha completado la lista de inicio rápido. Este inicio rápido es el último de tipo interactivo. Puede seguir estas guías de inicio rápido en su propio entorno de desarrollo. Eche un vistazo a los conceptos básicos sobre [desarrollo local](local-environment.md) y después seleccione un inicio rápido. Puede realizar este mismo ejercicio: vaya directamente al siguiente inicio rápido o vuelva a empezar con el inicio rápido sobre [números en C#](numbers-in-csharp-local.md).\n\nPuede obtener más información sobre cómo trabajar con el tipo `List` en el tema de la [Guía de .NET](../../standard/index.md) que trata sobre las [colecciones](../../standard/collections/index.md). Ahí también podrá conocer muchos otros tipos de colecciones.\0"
